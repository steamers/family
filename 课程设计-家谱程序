/*用二叉树实现家谱的相关运算
 设计一个程序，采用一棵二叉树表示一个家谱关系。要求程序具有如下功能：
（1）	文件操作功能：记录输入、记录输出，清除全部文件记录和将家谱记录存盘。
（2）	家谱操作功能：用括号表示法和凹入表示法输出家谱二叉树，查找某人的所有儿子，查找某人的所有祖先。*/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MaxWidth 40
#define MaxSize 30
#define NAMEWIDTH 10
typedef struct fnode
{
	char father[NAMEWIDTH];
	char wife[NAMEWIDTH];
	char son[NAMEWIDTH];
}FamType;
typedef struct tnode
{
	char name[NAMEWIDTH];
	struct tnode *lchild, *rchild;
}BTree;
BTree *CreatBTree(const char *root, FamType fam[], int n)
{
	int i = 0, j;
	BTree *bt, *p;
	bt = (BTree*)malloc(sizeof(BTree));
	strcpy(bt->name, root);
	bt->lchild = bt->rchild = NULL;
	while (i < n && strcmp(fam[i].father, root) != 0)
		i++;
	if (i < n)
	{
		p = (BTree*)malloc(sizeof(BTree));
		p->lchild = p->rchild = NULL;
		strcpy(p->name, fam[i].wife);
		bt->lchild = p;
		for (j = 0; j < n; j++)
			if (strcmp(fam[j].father, root) == 0)
			{
				p->rchild = CreatBTree(fam[j].son, fam, n);
				p = p->rchild;
			}
	}
	return (bt);
}
void DispTree1(BTree *b)
{
	if (b != NULL)
	{
		printf("%s", b->name);
		if (b->lchild != NULL || b->rchild != NULL)
		{
			printf("(");
			DispTree1(b->lchild);
			if (b->rchild != NULL)
				printf(",");
			DispTree1(b->rchild);
			printf(")");
		}
	}

}
void DispTree2(BTree*bt)
{
	BTree*St[MaxSize], *p;
	int Level[MaxSize][2], top, n, i, width = 4;
	if (bt != NULL)
	{
		printf("  >>家谱凹入表示法:\n");
		top = 1;
		St[top] = bt;
		Level[top][0] = width;
		while (top > 0)
		{
			p = St[top];
			n = Level[top][0];
			for (i = 1; i <= n; i++)
				printf(" ");
			printf("%6s", p->name);
			if (Level[top][1] == 1)
				printf("(1)");
			else
				printf("(r)");
			for (i = n + 1; i <= MaxWidth - 6; i += 2)
				printf("--");
			printf("\n");
			top--;
			if (p->rchild != NULL)
			{
				top++;
				St[top] = p->rchild;
				Level[top][0] = n + width;
				Level[top][1] = 2;
			}
			if (p->lchild != NULL)
			{
				top++;
				St[top] = p->lchild;
				Level[top][0] = n + width;
				Level[top][1] = 1;
			}
		}


	}



}
BTree * FindNode(BTree *bt, char xm[])
{
	BTree *p = bt;
	if (p == NULL)
		return (NULL);
	else
	{
		if (strcmp(p->name, xm) == 0)
			return (p);
		else
		{
			bt = FindNode(p->lchild, xm);
			if (bt != NULL)
				return (bt);
			else
				return (FindNode(p->rchild, xm));
		}

	}

}
void  FindSon(BTree*bt)
{
	char xm[NAMEWIDTH];
	BTree*p;
	printf("   >>父亲的姓名:");
	scanf("%s", xm);
	p = FindNode(bt, xm);
	if (p == NULL)
		printf("  >>不存在%s的父亲!\n", xm);

	else
	{
		p = p->lchild;
		if (p == NULL)
			printf("  >>%s没有妻子\n", xm);
		else
		{
			p = p->rchild;
			if (p == NULL)
				printf("  >>%s没有儿子!\n", xm);
			else
			{
				printf(" >>%s的儿子:", xm);
				while (p != NULL)
				{
					printf("%10s", p->name);
					p = p->rchild;
				}
				printf("\n");


			}

		}


	}



}
int Path(BTree *bt, BTree *s)
{
	BTree *St[MaxSize];
	BTree *p;
	int i, flag, top = -1;
	do
	{
		while (bt)
		{
			top++;
			St[top] = bt;
			bt = bt->lchild;
		}
		p = NULL;
		flag = 1;
		while (top != -1 && flag)
		{
			bt = St[top];
			if (bt->rchild == p)
			{
				if (bt == s)
				{
					printf(" >>所有祖先:");
					for (i = 0; i < top; i++)
						printf(" %s", St[i]->name);
					printf("\n");
					return 1;
				}
				else
				{
					top--;
					p = bt;

				}
			}
			else
			{
				bt = bt->rchild;
				flag = 0;

			}
		}
	} while (top != -1);
	return 0;
}
void Ancestor(BTree *bt)
{
	BTree *p;
	char xm[NAMEWIDTH];
	printf("  >>输人姓名:");
	scanf("%s", xm);
	p = FindNode(bt, xm);
	if (p != NULL)
		Path(bt, p);
	else
		printf("   >>不存在%s\n", xm);
}
void DelAll(FamType fam[], int &n)
{
	FILE *fp;
	if ((fp = fopen("fam.dat", "wb")) == NULL)
	{
		printf("  >>不能打开家谱文件\n");
		return;
	}
	n = 0;
	fclose(fp);
}
void ReadFile(FamType fam[], int &n)
{
	FILE *fp;
	long len;
	int i;
	if ((fp = fopen("fam.dat", "rb")) == NULL)
	{
		n = 0;
		return;
	}
	fseek(fp, 0, 2);
	len = ftell(fp);
	rewind(fp);
	n = len / sizeof(FamType);
	for (i = 0; i < n; i++)
		fread(&fam[i], sizeof(FamType), 1, fp);
	fclose(fp);
}
void SaveFile(FamType fam[], int n)
{
	int i;
	FILE *fp;
	if ((fp = fopen("fam.dat", "wb")) == NULL)
	{
		printf("  >>数据家谱文件不能打开\n");
		return;
	}
	for (i = 0; i < n; i++)
		fwrite(&fam[i], sizeof(FamType), 1, fp);
	fclose(fp);
}
void InputFam(FamType fam[], int &n)
{
	printf("   >>输入父亲，母亲和儿子姓名:");

	scanf("%s %s %s", fam[n].father, fam[n].wife, fam[n].son);
	n++;
}
void OutputFile(FamType fam[], int n)
{
	int i;
	if (n <= 0)
	{
		printf("   >>没有任何记录\n");
		return;
	}
	printf("   父亲     母亲   儿子\n");
	printf("     ---------------       \n");
	for (i = 0; i < n; i++)
		printf("   %10s  %10s %10s\n", fam[i].father, fam[i].wife, fam[i].son);
	printf("   -------------------  \n");
}

void main()
{
	BTree *bt;
	FamType fam[MaxSize];
	int n, sel, sel1;
	ReadFile(fam, n);
	do
	{
		printf("1:文件操作 2:家谱操作 0:退出 请选择:");
		scanf("%d", &sel);
		switch (sel)
		{
		case 1:
			do
			{
				printf("1:输入 2:输出 9:全清 0:存盘返回 请选择:");
				scanf("%d", &sel1);
				switch (sel1)
				{
				case 9:
					DelAll(fam, n);
					break;
				case 1:
					InputFam(fam, n);
					break;
				case 2:
					OutputFile(fam, n);
					break;
				case 0:
					SaveFile(fam, n);
					break;
				}
			} while (sel1 != 0);
			break;
		case 2:
			bt = CreatBTree(fam[0].father, fam, n);
			do
			{
				printf(" 1:括号表示法 2:凹入表示法 3:找某人所有儿子 4:找某人所有祖先 0:返回 请选择:");
				scanf("%d", &sel1);
				switch (sel1)
				{
				case 1:
					printf("  >>"); DispTree1(bt); printf("\n");
					break;
				case 2:
					DispTree2(bt);
					break;
				case 3:
					FindSon(bt);
					break;
				case 4:
					printf("  >>"); Ancestor(bt);
					break;
				}
			} while (sel1 != 0);
			break;
		}
	} while (sel != 0);
}
